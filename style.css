/* Mayer's Reset */
html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,
blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,
em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,
u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,
caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,
embed,figure,figcaption,footer,header,hgroup,menu,nav,output,
ruby,section,summary,time,mark,audio,video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article,
aside,details,figcaption,figure,footer,header,hgroup,menu,
nav,section {
  display: block;
}
body {
  line-height: 1;
}
ol,ul {
  list-style: none;
}
blockquote,q {
  quotes: none;
}
blockquote:before,blockquote:after,q:before,q:after {
  content: "";
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* My styling begins here */
/* body{
  background-image: url(/image/jacob-grishey-j8iPllhcWWg-unsplash.jpg);
  background-size: min(100vh, 100%);
} */

form {
  margin: 50px auto 0;
  width: 510px;
  height: 500px;
  /* border: 1px solid #ccc; */
  border-radius: 1em;
  position: relative;
}

section:first-child {
	width: 510px;
	border: 1px solid #ccc;
	padding: 10px;
	box-sizing: border-box;
	border-radius: 1em;  
}

p{
	font-size: 16px;
	font-weight: bold;
	font-family: sans-serif;
}

p:nth-child(2){
	margin-top: 10px;
}

em{
	font-style: italic;
}

h2 {
  margin-bottom: 0px;
  /* font-weight: bold; */
  box-sizing: border-box;
  position: absolute;
  top: 115px;
  left: 5px;
  background-color: white;
  padding: 5px;
}

section:last-of-type {
  display: flex;
  flex-wrap: wrap;
  border: 1px solid grey;
  margin: 30px auto 0;
  width: 510px;
  height: 300px;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 1em; 
  box-sizing: border-box;
}

div:nth-of-type(2n) {
  margin-left: 85px;
}

div {
  margin: 15px 0;
  width: 200px;
}

label,
input {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  text-align: left;
  box-sizing: border-box;
}

label {
  display: inline-block;
  font-size: 0.995rem;
  margin-bottom: 2px;
}

input {
  border: 2px solid grey;
  padding: 5px;
  border-radius: 5px;
  width: 100%;
}

input + span {
  position: relative;
}

input + span::before {
  position: absolute;
  right: -195px;
  top: -22px;
}

input[pattern]:not(:placeholder-shown):not(:focus):invalid + span::before {
  content: "❌";
  color: red;
}

input[pattern]:not(:placeholder-shown):invalid {
  border: 2px solid red;
}

input[pattern]:not(:placeholder-shown):valid + span::before {
  content: "✔️";
  color: green;
}

input[pattern]:not(:placeholder-shown):valid {
  border: 2px solid green;
}

input:focus {
  outline: none;
  border: 2px solid purple;
  padding: 5px;
  border-radius: 5px;
}

input[pattern]:invalid:focus:not(:placeholder-shown) {
  border: 2px solid red;
  padding: 5px;
  border-radius: 5px;
  width: 100%;
}

input[pattern]:hover,
input:focus {
  background-color: #eee;
}

input:required + span::after {
  font-size: 0.9rem;
  position: absolute;
  content: "required";
  color: white;
  background-color: black;
  padding: 2px 5px;
  top: -50px;
  left: 130px;
}

button {
	margin: 10px;
	box-sizing: border-box;
}

/*JavaScript password confirmation classes*/
.cpwdx:not(:placeholder-shown):not(:focus) + span::before {
  content: "❌";
}
.cpwdrb:not(:placeholder-shown) {
  border: 2px solid red;
}
.cpwdc:not(:placeholder-shown) + span::before {
  content: "✔️";
  color: green;
}
.cpwdgb:not(:placeholder-shown) {
  border: 2px solid green;
}
.cpwdf:focus {
  outline: none;
  border: 2px solid purple;
  padding: 5px;
  border-radius: 5px;
}
.cpwdfi:focus:not(:placeholder-shown) {
  border: 2px solid red;
  padding: 5px;
  border-radius: 5px;
  width: 100%;
}
.cpwdv:focus:not(:placeholder-shown) {
  border: 2px solid green;
  padding: 5px;
  border-radius: 5px;
  width: 100%;
}

/* cpwd = confirm password, rb = red border for invalid input, v = valid state,
gb = green border for valid input, fi = focus at invaliid state,
x = the invalid state icon ❌ when not focused, c = ✔️ for correct input */